---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MaDDo.
--- DateTime: 31-Jul-19 4:55 PM
---
function gadget:GetInfo()
    return {
        name 	= "Unit Tech Core",
        desc	= "Enables upgrades for units",
        author	= "MaDDoX",
        date	= "Sept 24th 2019",
        license	= "GNU GPL, v2 or later",
        layer	= -1,
        enabled = true,
        -- The only thing this guy does is to award the given tech to the Team and/or unlock a given button. --TODO
    }
end

VFS.Include("gamedata/taptools.lua")

local spGetUnitDefID        = Spring.GetUnitDefID
local spGetUnitTeam         = Spring.GetUnitTeam
local spFindUnitCmdDesc     = Spring.FindUnitCmdDesc
local spGetUnitCmdDescs     = Spring.GetUnitCmdDescs
local spInsertUnitCmdDesc   = Spring.InsertUnitCmdDesc
local spEditUnitCmdDesc     = Spring.EditUnitCmdDesc
local spSetUnitRulesParam   = Spring.SetUnitRulesParam
local spMarkerAddPoint      = Spring.MarkerAddPoint
local spMarkerErasePosition = Spring.MarkerErasePosition
local spGetGameFrame        = Spring.GetGameFrame
local spUseUnitResource     = Spring.UseUnitResource
local spGetUnitPosition     = Spring.GetUnitPosition

local RedStr = "\255\255\001\001"
local unitRulesParamName = "upgrade"
local oldFrame = 0
--local CMD_MANUALFIRE = CMD.MANUALFIRE
local CMD_CAPTURE = CMD.CAPTURE


CMD.UPG_CAPTURE = 42999
CMD_UPG_CAPTURE = CMD.UPG_CAPTURE

-- Unit / Tech settings (as shown in a given unit's command list) (TODO: Move to a separate file for better organization)
UT = {
    capture = {
        UpgradeCmdDesc = {
            id      = CMD_UPG_CAPTURE,
            name    = 'Upg D-Gun',
            action  = 'upgradecapture',
            cursor  = 'Morph',
            type    = CMDTYPE.ICON,
            tooltip = 'Enables Capture',
        },
        prereq = "",
        metalCost = 200,
        energyCost = 1200,
        upgradeTime = 5 * 30, --5 seconds, in frames
        type = "tech",
        buttonToUnlock = CMD_CAPTURE,
        affectedUnits = { [UnitDefNames["armck"].id] = true, [UnitDefNames["armcv"].id] = true, [UnitDefNames["armca"].id] = true,
                          [UnitDefNames["corck"].id] = true, [UnitDefNames["corcv"].id] = true, [UnitDefNames["corca"].id] = true,
                          [UnitDefNames["armack"].id] = true,[UnitDefNames["armacv"].id] = true,[UnitDefNames["armaca"].id] = true,
                          [UnitDefNames["corack"].id] = true,[UnitDefNames["coracv"].id] = true,[UnitDefNames["coraca"].id] = true,
                          [UnitDefNames["cormando"].id] = true,
        }
    },
}
-- Value is used as key of the UT (Unit Tech) table
UpgradableUnits = {
    [UnitDefNames["armoutpost"].id] = {"capture","techbooster1"},
    [UnitDefNames["coroutpost"].id] = {"capture","techbooster1"},
}
TechUpgrades = {} -- Auto-completed from UT @ Initialize

--local tooltipRequirement = "\n"..RedStr.."Requires ".. prereq,
--local UpgradeTooltip = 'Enables D-gun ability / command'
--local tooltipRequirement = "\n"..RedStr.."Requires ".. PUU.dgun.prereq
local upgradingUnits = {}   --{ unitID = unitID, progress = 0, puu = puu, }
local upgradedUnits = {}

if not gadgetHandler:IsSyncedCode() then
    return end

local function isUpgrading(unitID)
    for idx = 1, #upgradingUnits do
        if upgradingUnits[idx].unitID == unitID then
            return idx
        end
    end
    return nil
end

local function editCommand (unitID, CMDID, options)
    local cmdDescID = spFindUnitCmdDesc(unitID, CMDID)
    if not cmdDescID or not options then --or not options.defCmdDesc then
        return end

    if options.req and options.defCmdDesc then
        local append = ""
        if options.req == "perunit" then
            if not upgradedUnits[unitID] then
                append = "\n\n"..RedStr.."Requires: "..options.defCmdDesc.name.." unit upgrade."
                --append = options.missingPrereqTooltip
            end
        else
            if not options.req == "" and not GG.TechCheck(options.req, spGetUnitTeam(unitID)) then
                append = "\n\n"..RedStr.."Requires Tech: "..options.req
            end
        end
        options.tooltip = ((options.tooltip == nil) and options.defCmdDesc.tooltip or options.tooltip) .. append
    end

    local currentCmdDesc = spGetUnitCmdDescs(unitID, cmdDescID, cmdDescID)[1]

    currentCmdDesc.tooltip = options.tooltip and options.tooltip or currentCmdDesc.tooltip
    currentCmdDesc.hidden = (options.hidden == nil) and currentCmdDesc.hidden or options.hidden
    currentCmdDesc.disabled = (options.disabled == nil) and currentCmdDesc.disabled or options.disabled

    spEditUnitCmdDesc (unitID, cmdDescID, currentCmdDesc)
    --Spring.Echo(tostringplus(currentCmdDesc))

    -- getUpgradeTooltip(spGetUnitTeam(unitID))
    -- Spring.Echo("New tooltip: "..newCmdDesc.tooltip.." disabled: "..tostring(disabled))
end

-- TODO: Add manualfire edited tooltip
--addUpdateCommand(unitID, puuItem.UpgradeCmdDesc.id, puuItem.UpgradeCmdDesc, { req=puuItem.Prereq, defCmdDesc=puuItem.UpgradeCmdDesc })
local function addUpdateCommand(unitID, utItem)
    local insertID = utItem.UpgradeCmdDesc.id
    local cmdDesc = utItem.UpgradeCmdDesc
    local options = { req= utItem.prereq, defCmdDesc= utItem.UpgradeCmdDesc }

    local cmdDescId = spFindUnitCmdDesc(unitID, cmdDesc.id)
    if not cmdDescId then
        spInsertUnitCmdDesc(unitID, insertID, cmdDesc)
    else
        spEditUnitCmdDesc(unitID, cmdDescId, cmdDesc)
    end
    if options then
        editCommand (unitID, cmdDesc.id, options)
    end
end

local function localAlert(unitID, msg)
    local x, y, z = spGetUnitPosition(unitID)  --x and z on map floor, y is height
    spMarkerAddPoint(x,y,z,msg,true)
    spMarkerErasePosition(x,y,z)
end

local function hasPrereq(prereq, unitTeam)
    return GG.TechCheck(prereq, unitTeam)
end

local function getTechUpg(unitDefID, cmdID)
    --[UnitDefNames["armoutpost"].id] = {"capture","techbooster1"},
    local upgradeList = UpgradableUnits[unitDefID]
    for i, upgrade in ipairs(upgradeList) do
        local upgData = UT[upgrade]
        if upgData and cmdID == upgData.UpgradeCmdDesc.id then
            return upgData
        end
    end
    return nil
end

function gadget:AllowCommand(unitID,unitDefID,unitTeam,cmdID) --,cmdParams
    if upgradedUnits[unitID] then
        return true
    end

    local techUpg = getTechUpg(unitDefID, cmdID)

    --Spring.Echo("Expected puu id: "..puu.UpgradeCmdDesc.id.." cmdID: "..cmdID)
    if techUpg then
        -- If currently upgrading, cancel upgrade
        local upgradingIdx = isUpgrading(unitID)
        if upgradingIdx then
            upgradingUnits[upgradingIdx] = nil
            spSetUnitRulesParam(unitID, unitRulesParamName, nil)    -- Default, for UI purposes
            return true
        end
        -- Otherwise, check for requirements
        if hasPrereq(techUpg.prereq, unitTeam) then
            --Spring.Echo("Added "..unitID..", count: "..#upgradingUnits)
            upgradingUnits[#upgradingUnits+1] = { unitID = unitID, progress = 0, ut = techUpg, }
            spSetUnitRulesParam(unitID, unitRulesParamName, 0)
        else
            localAlert(unitID, "Requires: ".. techUpg.prereq)
        end
    end
    return true
end

function gadget:Initialize()
    for _,upgrade in pairs(UT) do
        TechUpgrades[upgrade] = true
    end
end

function gadget:UnitCreated(unitID, unitDefID, unitTeam)
    local upgradeList = UpgradableUnits[unitDefID]
    if not upgradeList then
        return end

    -- Add all upgrade command buttons, disabled
    for _, upgrade in ipairs(upgradeList) do
        local utItem = UT[upgrade]
        if utItem then
            addUpdateCommand(unitID, utItem)
            editCommand(unitID, utItem.buttonToUnlock, { disabled=true, req="perunit", defCmdDesc=utItem.UpgradeCmdDesc})
        end
    end

end

-- Upgrade is complete, unlock relevant button
local function finishUpgrade(idx, unitID, utItem)
    editCommand (unitID, utItem.UpgradeCmdDesc.id, { disabled=true})

    -- Enable action & remove "Requires" red alert at bottom
    editCommand (unitID, utItem.buttonToUnlock, { disabled=false, req="", defCmdDesc = utItem.UpgradeCmdDesc})

    ipairs_remove(upgradingUnits, unitID)   -- setting it to nil won't remove the element, affecting the # operator
    upgradedUnits[unitID] = true
    spSetUnitRulesParam(unitID, unitRulesParamName, nil)
end

function gadget:UnitDestroyed(unitID)
    upgradedUnits[unitID] = nil
    ipairs_remove(upgradingUnits, unitID)
end

function gadget:GameFrame()
    local frame = spGetGameFrame()
    if (frame <= oldFrame) then
        return end
    oldFrame = frame
    if not upgradingUnits or #upgradingUnits == 0 then    -- If table empty, return
        return end

    --Spring.Echo("Count: "..#upgradingUnits)

    --{ unitID = unitID, progress = 0, ut = ut, }
    for idx,data in ipairs(upgradingUnits) do
        local unitID = data.unitID
        local progress = data.progress
        local ut = data.ut
        if spUseUnitResource(unitID, { ["m"] = ut.metalCost / ut.upgradeTime, ["e"] = ut.energyCost / ut.upgradeTime }) then
            local progress = progress + 1 / ut.upgradeTime -- TODO: Add "Morph speedup" bonus maybe?
            upgradingUnits[idx].progress = progress
            spSetUnitRulesParam(unitID, unitRulesParamName, progress)
            if progress >= 1.0 then
                finishUpgrade(idx, unitID, ut)
            end
        end
    end
end

