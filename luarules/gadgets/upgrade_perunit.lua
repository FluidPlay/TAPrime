---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MaDDo.
--- DateTime: 31-Jul-19 4:55 PM
---
function gadget:GetInfo()
    return {
        name 	= "Upgrade - Per Unit",
        desc	= "Enables per-unit upgrades",
        author	= "MaDDoX",
        date	= "Sept 24th 2019",
        license	= "GNU GPL, v2 or later",
        layer	= -1,
        enabled = true,
        -- TODO: Currently only supports blocking/unblocking command fire weapons
    }
end

--[[    Full Upgrading Structure:

GlobalUpgrades [made by techcenter]
	=> Multiple upgrades per unit
	=> Provide / may require a team tech
	=> "Consumed" by other gadgets (GUHandler)
		* Morph Speedup (unit_morph.lua)
		* Button-unlock (update from capture)

PerUnitUpgrades [made by unit]
	=> One upgrade per unit (max)
	=> May require a team tech
	=> PUU Handlers: <rely on the global PUUunits table>
		* Button-unlock
		* Healing Pulse (Aura, increases health)
		* Overclock Pulse (Aura, increases speed + firerate)
		* Motor Hack (Weapon - reduces speed by 40%)
		* Weapon Switcher (disables primary, enables secondary weapon)
]]

VFS.Include("gamedata/taptools.lua")

local spGetUnitDefID        = Spring.GetUnitDefID
local spGetUnitTeam         = Spring.GetUnitTeam
local spFindUnitCmdDesc     = Spring.FindUnitCmdDesc
local spGetUnitCmdDescs     = Spring.GetUnitCmdDescs
local spInsertUnitCmdDesc   = Spring.InsertUnitCmdDesc
local spEditUnitCmdDesc     = Spring.EditUnitCmdDesc
local spSetUnitRulesParam   = Spring.SetUnitRulesParam
local spMarkerAddPoint      = Spring.MarkerAddPoint
local spMarkerErasePosition = Spring.MarkerErasePosition
local spGetGameFrame        = Spring.GetGameFrame
local spUseUnitResource     = Spring.UseUnitResource
local spGetUnitPosition     = Spring.GetUnitPosition

local RedStr = "\255\255\001\001"
local unitRulesParamName = "upgrade"
local oldFrame = 0
local CMD_MANUALFIRE = CMD.MANUALFIRE

-- Per-unit upgrade settings (TODO: Move to a separate file for better organization)

CMD.UPG_DGUN = 41999
CMD_UPG_DGUN = CMD.UPG_DGUN
CMD.UPG_GRENADE = 41998
CMD_UPG_GRENADE = CMD.UPG_GRENADE
CMD.UPG_FIRERAIN = 41997
CMD_UPG_FIRERAIN = CMD.UPG_FIRERAIN
CMD.UPG_FIRERAIN = 41996
CMD_UPG_BARRAGE = CMD.UPG_BARRAGE

-- TODO: Move to Separate file for better organization
-- Unit Upgrades (as shown in a certain unit's command list)
UU = {
    dgun = {
        id = "dgun",
        UpgradeCmdDesc = {
            id      = CMD_UPG_DGUN,
            name    = '^ D-Gun',
            action  = 'dgunupgrade',
            cursor  = 'Morph',
            type    = CMDTYPE.ICON,
            tooltip = 'Enables D-gun weapon',
            texture = 'luaui/images/upgrades/techdgun.dds',
            onlyTexture = true,
        },
        prereq = "Tech1",
        metalCost = 200,
        energyCost = 1200,
        upgradeTime = 10 * 30, --5 seconds, in frames
        type = "tech",
        alertWhenDone = true, -- [Optional] if true, fires an alert once completed
        buttonToUnlock = CMD_MANUALFIRE,
    },
    grenade = {     -- >> Peewee's Laser Grenade (Per Unit)
        id = "grenade",
        UpgradeCmdDesc = {
            id      = CMD_UPG_GRENADE,
            name    = '^ Grenade',
            action  = 'grenadeupgrade',
            cursor  = 'Morph',
            type    = CMDTYPE.ICON,
            tooltip = 'Enables Laser Grenade weapon',
            texture = 'luaui/images/upgrades/techexplosives.dds',
            onlyTexture = true,
        },
        prereq = "Tech",
        metalCost = 80,
        energyCost = 480,     --6x metalCost
        upgradeTime = 5 * 30, --5 seconds, in frames
        type = "perunit",
        buttonToUnlock = CMD_MANUALFIRE,
    },
    firerain = {     -- >> Arm Samson's Missile Shower (Per Unit)
        id = "firerain",
        UpgradeCmdDesc = {
            id      = CMD_UPG_FIRERAIN,
            name    = '^ FireRain',
            action  = 'firerainupgrade',
            cursor  = 'Morph',
            type    = CMDTYPE.ICON,
            tooltip = 'Enables Fire Rain weapon',
            texture = 'luaui/images/upgrades/techdgun.dds',
            onlyTexture = true
        },
        prereq = "Tech1",
        metalCost = 160,
        energyCost = 960,
        upgradeTime = 10 * 30, --5 seconds, in frames
        type = "perunit",
        buttonToUnlock = CMD_MANUALFIRE,
    },
    barrage = {     -- >> Core Informer comet rain (Per Unit)
        id = "barrage",
        UpgradeCmdDesc = {
            id      = CMD_UPG_BARRAGE,
            name    = 'Upg Barrage',
            action  = 'barrageupgrade',
            cursor  = 'Morph',
            type    = CMDTYPE.ICON,
            tooltip = 'Enables Barrage weapon',
            texture = 'luaui/images/upgrades/techexplosives.dds',
            onlyTexture = true,
        },
        prereq = "Tech1",
        metalCost = 160,
        energyCost = 960,
        upgradeTime = 10 * 30, --5 seconds, in frames
        type = "perunit",
        buttonToUnlock = CMD_MANUALFIRE,
    },
}
-- Value is used as key of PUU (Per-unit upgrade table)
UnitResearchers = {
    [UnitDefNames["corcom"].id] = "dgun",
    --[UnitDefNames["corcom2"].id] = "dgun",
    --[UnitDefNames["corcom3"].id] = "dgun",
    --[UnitDefNames["corcom4"].id] = "dgun",
    [UnitDefNames["armcom"].id] = "dgun",
    --[UnitDefNames["armcom2"].id] = "dgun",
    --[UnitDefNames["armcom3"].id] = "dgun",
    --[UnitDefNames["armcom4"].id] = "dgun",
    [UnitDefNames["armpw"].id] = "grenade",
    [UnitDefNames["armsam"].id] = "firerain",
    [UnitDefNames["corvrad"].id] = "plasmabarrage",
}
Upgrades = {} -- Auto-completed from PUU @ Initialize

--local tooltipRequirement = "\n"..RedStr.."Requires ".. prereq,
--local UpgradeTooltip = 'Enables D-gun ability / command'
--local tooltipRequirement = "\n"..RedStr.."Requires ".. PUU.dgun.prereq
local upgradingUnits = {}   --{ unitID = unitID, progress = 0, puu = puu, }
local upgradedUnits = {}

if not gadgetHandler:IsSyncedCode() then
    return end

--local function isUpgrading(unitID)
--    for idx = 1, #upgradingUnits do
--        if upgradingUnits[idx].unitID == unitID then
--            return idx
--        end
--    end
--    return nil
--end

--- TODO: Move the tooltip description editing logic to taptools (somehow?)
--local function editCommand (unitID, cmdID, options)
--    local cmdDesc = spFindUnitCmdDesc(unitID, cmdID)
--    if not cmdDesc or not options then --or not options.defCmdDesc then
--        return end
--
--    if options.req and options.defCmdDesc then
--        local append = ""
--        if options.req == "perunit" then        -- Just tags if the button requirement is a per-unit upgrade
--            if not upgradedUnits[unitID] then
--                append = "\n\n"..RedStr.."Requires: "..options.defCmdDesc.name.." unit upgrade."
--                --append = options.missingPrereqTooltip
--            end
--        else
--            if not options.req == "" and not GG.TechCheck(options.req, spGetUnitTeam(unitID)) then
--                append = "\n\n"..RedStr.."Requires Tech: "..options.req
--            end
--        end
--        options.tooltip = ((options.tooltip == nil) and options.defCmdDesc.tooltip or options.tooltip) .. append
--    end
--
--    local currentCmdDesc = spGetUnitCmdDescs(unitID, cmdDesc, cmdDesc)[1]
--
--    currentCmdDesc.tooltip = options.tooltip and options.tooltip or currentCmdDesc.tooltip
--    currentCmdDesc.hidden = (options.hidden == nil) and currentCmdDesc.hidden or options.hidden
--    currentCmdDesc.disabled = (options.disabled == nil) and currentCmdDesc.disabled or options.disabled
--
--    spEditUnitCmdDesc (unitID, cmdDesc, currentCmdDesc)
--end

-- TODO: Add manualfire edited tooltip
--AddUpdateCommand(unitID, puuItem.UpgradeCmdDesc.id, puuItem.UpgradeCmdDesc, { req=puuItem.Prereq, defCmdDesc=puuItem.UpgradeCmdDesc })
local function addUpdateCommand(unitID, puuItem)
    local insertID = puuItem.UpgradeCmdDesc.id
    local cmdDesc = puuItem.UpgradeCmdDesc
    local options = { req=puuItem.prereq, defCmdDesc=puuItem.UpgradeCmdDesc }

    local cmdDescId = spFindUnitCmdDesc(unitID, cmdDesc.id)
    if not cmdDescId then
        spInsertUnitCmdDesc(unitID, insertID, cmdDesc)
    else
        spEditUnitCmdDesc(unitID, cmdDescId, cmdDesc)
    end
    spEditUnitCmdDesc(unitID, cmdDescId, options)
end

local function startUpgrade(unitID, puu)
    --Spring.Echo("Added "..unitID..", count: "..#upgradingUnits)
    upgradingUnits[unitID] = { progress = 0, puu = puu, }
    spSetUnitRulesParam(unitID, unitRulesParamName, 0)
end

local function cancelUpgrade(unitID)
    upgradingUnits[unitID] = nil
    spSetUnitRulesParam(unitID, unitRulesParamName, nil)
    return true
end

function gadget:AllowCommand(unitID,unitDefID,unitTeam,cmdID) --,cmdParams
    local upgrade = UnitResearchers[unitDefID]
    if not upgrade then
        return true
    end
    local puu = UU[upgrade]

    if cmdID == puu.UpgradeCmdDesc.id and (not upgradedUnits[unitID]) then
        --- If currently upgrading, cancel upgrade
        if upgradingUnits[unitID] then
            cancelUpgrade(unitID)
        end
        --- Otherwise, check for requirements
        if HasTech(puu.prereq, unitTeam) then
            startUpgrade(unitID, puu)
        else
            LocalAlert(unitID, "Requires: "..puu.prereq)
        end
    end
    return true
end

function gadget:Initialize()
    for _,upgrade in pairs(UU) do
        Upgrades[upgrade] = true
    end
end

function gadget:UnitCreated(unitID, unitDefID, unitTeam)
    local upgrade = UnitResearchers[unitDefID]
    if not upgrade then
        return end
    --Spring.Echo("Found locally available upgrade: "..upgrade)

    local puuItem = UU[upgrade]
    if puuItem then
        addUpdateCommand(unitID, puuItem)
        --spEditUnitCmdDesc(unitID, CMD_MANUALFIRE, {disabled=true, req="perunit", defCmdDesc=UpgradeCmdDesc})
        BlockCmdID(unitID, puuItem.buttonToUnlock) -- usually CMD_MANUALFIRE
    else
        --Spring.Echo ("Defined upgrade not found in Settings: "..upgrade)
    end
end

local function finishUpgrade(unitID, puu)
    --spEditUnitCmdDesc(unitID, puu.UpgradeCmdDesc.id, {disabled=true})
    BlockCmdID(unitID, puu.UpgradeCmdDesc.id) --TODO: Edit Prereq

    if puu.alertWhenDone then
        LocalAlert(unitID, "Unit upgrade complete.")
    end

    -- Enable action & remove "Requires" red alert at bottom
    --spEditUnitCmdDesc(unitID, puu.UpgradeCmdDesc.id, {disabled=false, req="", defCmdDesc = puu.UpgradeCmdDesc})

    BlockCmdID(unitID, puu.buttonToUnlock, false) -- TODO: Edit requirement
    upgradingUnits[unitID] = nil
    upgradedUnits[unitID] = true

    spSetUnitRulesParam(unitID, unitRulesParamName, nil)
end

function gadget:UnitDestroyed(unitID)
    upgradedUnits[unitID] = nil
    upgradingUnits[unitID] = nil
end

function gadget:GameFrame()
    local frame = spGetGameFrame()
    if (frame <= oldFrame) then
        return end
    oldFrame = frame
    if not upgradingUnits or #upgradingUnits == 0 then    -- If table empty, return
        return end

    --Spring.Echo("Count: "..#upgradingUnits)

    --{ unitID = unitID, progress = 0, puu = puu, }
    for unitID, data in pairs(upgradingUnits) do
        local progress = data.progress
        local puu = data.puu
        if spUseUnitResource(unitID, { ["m"] = puu.metalCost / puu.upgradeTime, ["e"] = puu.energyCost / puu.upgradeTime }) then
            local progress = progress + 1 / puu.upgradeTime -- TODO: Add "Morph speedup" bonus maybe?
            upgradingUnits[unitID].progress = progress
            spSetUnitRulesParam(unitID, unitRulesParamName, progress)
            if progress >= 1.0 then
                finishUpgrade(unitID, puu)
            end
        end
    end
end

