---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MaDDo.
--- DateTime: 31-Jul-19 4:55 PM
---
function gadget:GetInfo()
    return {
        name 	= "Upgrade - Global",
        desc	= "Enables global upgrades for units, from tech researchers",
        author	= "MaDDoX",
        date	= "Sept 24th 2019",
        license	= "GNU GPL, v2 or later",
        layer	= -1,
        enabled = true, --true, (WIP)
        -- The only thing this guy does is to award the given tech to the Team and/or unlock a given button.
    }
end

--[[    Full Upgrading Structure:

GlobalUpgrades [made by techcenter]
	=> Multiple upgrades per unit
	=> Provide / may require a team tech
	=> "Consumed" by other gadgets (GUHandler)
		* Morph Speedup (unit_morph.lua)
		* Button-unlock (update from capture)

PerUnitUpgrades [made by unit]
	=> One upgrade per unit (max)
	=> May require a team tech
	=> UnitUpgrade Handlers: <rely on the global UnitUpg table>
		* Button-unlock
		* Healing Pulse (Aura, increases health)
		* Overclock Pulse (Aura, increases speed + firerate)
		* Motor Hack (Weapon - reduces speed by 40%)
		* Weapon Switcher (disables primary, enables secondary weapon)
]]

VFS.Include("gamedata/taptools.lua")
VFS.Include("luarules/configs/global_upgradedata.lua")

--local spGetUnitDefID        = Spring.GetUnitDefID
--local spGetUnitCmdDescs     = Spring.GetUnitCmdDescs
local spGetUnitTeam         = Spring.GetUnitTeam
local spSetUnitRulesParam   = Spring.SetUnitRulesParam
local spGetGameFrame        = Spring.GetGameFrame
local spUseUnitResource     = Spring.UseUnitResource
local spGetUnitHealth       = Spring.GetUnitHealth

local upgParamName = "upgrade" -- Param Name to be read by unit_healthbars2.lua (lua UI)
local oldFrame = 0

--TechUpgrades = {} -- Auto-completed from UT @ Initialize

local upgradingUnits = {}   -- => { unitID = { progress = 0, upgradeID = { upgData = { UpgradeCmdDesc,.. } ,... }} } || [uID][upgID]
local upgradedUnits = {}    -- => { unitID = { upgrades = { ["capture"]=true, ... } } | upgradeID
local upgradeLockedUnits = {} --  { unitID = { upgradeID = { prereq = "", upgradeButton = cmdID, orgTooltip = "" .. }, ... }
local globalUpgraders = {}  -- { unitID = true, .. } || Tech Centers, basically

if not gadgetHandler:IsSyncedCode() then
    return end

local function isUpgrading(unitID, upgradeID)
    if not unitID or not upgradeID or not upgradingUnits[unitID] then
        return false
    end
    return upgradingUnits[unitID][upgradeID]
end

--- Returns UpgradeID (from GlobalUpgrades) with the related cmdID (eg.: CMD_CAPTURE)
local function getUpgradeID (unitDefID, cmdID)
    --[UnitDefNames["armoutpost"].id] = {"capture","techbooster1"},
    local upgradeList = GlobalResearchers[unitDefID]
    if upgradeList == nil then
        return nil end
    for _, upgradeID in ipairs(upgradeList) do
        local upgData = GlobalUpgrades[upgradeID]
        if upgData and cmdID == upgData.UpgradeCmdDesc.id then
            return upgradeID
        end
    end
    return nil
end

--- StartUpgrade / CancelUpgrade
local function SetUpgrade(unitID, upgradeID, progress, upgData)
    if (upgData == nil and upgradingUnits[unitID] and upgradingUnits[unitID][upgradeID]) then
        upgradingUnits[unitID][upgradeID] = nil
    else
        if upgradingUnits[unitID] == nil then
            upgradingUnits[unitID] = {}
        end
        upgradingUnits[unitID].progress = progress
        upgradingUnits[unitID][upgradeID] = { upgData = upgData, }
    end

    spSetUnitRulesParam(unitID, upgParamName, progress)
end

local function cancelUpgrade(unitID, upgradeID)
    SetUpgrade(unitID, upgradeID, nil, nil)
end

local function tryStartUpgrade(unitID, upgradeID) --, cmdID, unitTeam)
    local upgEntry = GlobalUpgrades[upgradeID]
    if upgEntry == nil then
        return false end

    SetUpgrade(unitID, upgradeID, 0, upgEntry)

    --- Obsolete. Using buildordermenu instead
    --BlockCmdID(unitID, cmdID, cmdDesc.tooltip, "Upgrading")
    --end
    return true
end

function gadget:AllowCommand(unitID,unitDefID,unitTeam,cmdID,cmdParams,cmdOptions)
    -- If unit is not complete, disallow upgrades
    if select(5, spGetUnitHealth(unitID)) < 1 then
        return true
    end
    local upgradeID = getUpgradeID(unitDefID, cmdID)
    if not upgradeID then
        return true
    end
    --TODO: Remove ASAP, obsolete. Button should already be disabled instead
    if upgradedUnits[unitID] and upgradedUnits[unitID][upgradeID] then
        --LocalAlert(unitID, "Upgrade Already researched: "..upgradeID)
        return false
    end

    -- If currently upgrading and right-clicked, cancel upgrade
    if isUpgrading(unitID, upgradeID) then
        if cmdOptions.right == true then
            cancelUpgrade(unitID, upgradeID)
            return true
        end
    else                --- Otherwise, check for requirements
        return tryStartUpgrade(unitID, upgradeID) --, cmdID, unitTeam)
    end
end

function gadget:Initialize()
    --for _,upgrade in pairs(GlobalUpgrades) do
    --    TechUpgrades[upgrade] = true
    --end
end

function gadget:UnitCreated(unitID, unitDefID, unitTeam)
    local upgradeList = GlobalResearchers[unitDefID]
    if not upgradeList then
        return end
    -- Add all upgrade command buttons, disabled/enabled
    for _, upgradeID in ipairs(upgradeList) do
        local upgData = GlobalUpgrades[upgradeID]
        if upgData then    -- Has a valid Pre-requisite Tech
            local cmdDesc = upgData.UpgradeCmdDesc
            if cmdDesc then
                upgData.buttonToUnlockTooltip = cmdDesc.tooltip end

            ----Check for requirements and edit tooltip if needed
            local block = not HasTech(upgData.prereq, unitTeam)
            --Spring.Echo("Block? "..tostring(block).." "..upgData.prereq)
            AddUpdateCommand(unitID, cmdDesc, block)
            SetCmdIDEnable(unitID, upgData.buttonToUnlock, block, upgData.buttonToUnlockTooltip, "Requires: "..upgradeID.." global upgrade")

            if block then
                if upgradeLockedUnits[unitID] == nil then
                    upgradeLockedUnits[unitID] = {}
                end
                upgradeLockedUnits[unitID][upgradeID] = { prereq = upgData.prereq,
                                               upgradeButton = upgData.UpgradeCmdDesc.id,
                                               orgTooltip = upgData.UpgradeCmdDesc.tooltip }
            end
        end
    end
end

function gadget:UnitDestroyed(unitID)
    upgradedUnits[unitID] = nil     -- TODO: Revoke awarded Tech Center techs.
    upgradingUnits[unitID] = nil
    upgradeLockedUnits[unitID] = nil
end

-- If unit was taken, apply unit-creation check
function gadget:UnitTaken(unitID, unitDefID, oldTeamID, teamID)
    self:UnitCreated(unitID, unitDefID, teamID)
    --if isDone(unitID) then self:UnitFinished(unitID, unitDefID, teamID) end
end

function gadget:UnitGiven(unitID, unitDefID, newTeamID, oldTeamID)
    self:UnitDestroyed(unitID, unitDefID, oldTeamID)
end

-- Upgrade is complete, award related tech to the researcher team
local function finishUpgrade(unitID, upgData, upgID)
    --local cmdDesc = Upg.UpgradeCmdDesc
    --cmdDesc.disabled = true
    --AddUpdateCommand(unitID, cmdDesc)

    -- ### Disable Upgrade button
    -- Must block upgrade button on *all* upgradeLockedUnits
    -- & Enable action & remove "Requires" red alert at bottom

    -- Once an unit upgrade is complete we can safely stop watching its prereqs
    for uID, data in pairs (upgradeLockedUnits) do
        if data[uID] and data[uID][upgID] then
            BlockCmdID(uID, upgData.UpgradeCmdDesc.id, upgData.UpgradeCmdDesc.tooltip)
            UnblockCmdID(uID, upgData.buttonToUnlock, upgData.buttonToUnlockTooltip)
            data[uID][upgID] = nil
        end
    end

    upgradingUnits[unitID][upgID] = nil
    if not upgradedUnits[unitID] then
        upgradedUnits[unitID] = {} end
    upgradedUnits[unitID][upgID] = true
    --TODO: Go through all global-tech upgraders and block it as well
    BlockCmdID(unitID, upgData.UpgradeCmdDesc.id, upgData.UpgradeCmdDesc.tooltip, "Already Researched.")

    spSetUnitRulesParam(unitID, upgParamName, nil)  -- Used by UI (healthbars2)

    local techToGrant = upgData.techToGrant
    if techToGrant then
        GG.TechGrant(techToGrant, spGetUnitTeam(unitID), true) end

    if upgData.alertWhenDone then
        LocalAlert(unitID, "Upgrade Finished: ".. upgID)
    end
end

function gadget:GameFrame()
    local frame = spGetGameFrame()
    if (frame <= oldFrame) then
        return end
    oldFrame = frame

    --Watch all prereq blocked units to see if their prereqs are done/lost, block/unblock accordingly
    --Spring.Echo("Upgrade-locked units count: "..tablelength(upgradeLockedUnits))
    for unitID, upgrades in pairs(upgradeLockedUnits) do
        for upgID, data in pairs (upgrades) do
            local hasTech = HasTech(data.prereq, spGetUnitTeam(unitID))
            --Spring.Echo("UnitID "..unitID.." has tech: "..tostring(hasTech).." for upg: "..upgID)
            SetCmdIDEnable(unitID, data.upgradeButton, not hasTech, data.orgTooltip, "Requires: "..data.prereq )
        end
    end

    if not upgradingUnits then    -- If no unit upgrading, get outta here
        return end
    --{ unitID = { progress = 0, upgradeID = { upgData = { UpgradeCmdDesc,.. } ,... }} } || [uID][upgID]
    for unitID, progressandupgrades in pairs(upgradingUnits) do
        local progress = progressandupgrades.progress
        for key, value in progressandupgrades do
            local upgradeID = key
            local upgData = value
            if upgradeID ~= "progress" and progress ~= nil and upgData ~= nil then
                if spUseUnitResource(unitID, {  ["m"] = upgData.metalCost / upgData.upgradeTime,
                                                ["e"] = upgData.energyCost / upgData.upgradeTime }) then
                    progress = progress + 1 / upgData.upgradeTime -- TODO: Add "Morph speedup" bonus maybe?
                    upgradingUnits[unitID].progress = progress
                    spSetUnitRulesParam(unitID, upgParamName, progress)
                    if progress >= 1.0 then
                        finishUpgrade(unitID, upgData, data.upgradeID)
                    end
                end
            end
        end
    end
end


-- [Deprecated] Logic moved to Handlers
--local function editCommand (unitID, CMDID, upgradeID)
--    --local options = { req = upgData.prereq, defCmdDesc= upgData.UpgradeCmdDesc }
--    local cmdDescID = spFindUnitCmdDesc(unitID, CMDID)
--    local upgData = GlobalUpgrades[upgradeID]
--    if not cmdDescID or not upgData then --or not options.defCmdDesc then
--        return end
--
--    local tooltip = upgData.UpgradeCmdDesc.tooltip
--    local append = ""
--    if upgData.prereq and upgData.UpgradeCmdDesc then
--        --If it has a requirement and it's not fulfilled, append that to the button description
--        if not upgData.prereq == "" and not HasTech(upgData.prereq, spGetUnitTeam(unitID)) then
--            append = "\n\n"..RedStr.."Requires Tech: "..upgData.prereq
--            tooltip = tooltip .. append
--        end
--    end
--
--    local currentCmdDesc = spGetUnitCmdDescs(unitID, cmdDescID, cmdDescID)[1]
--
--    currentCmdDesc.tooltip = upgData.tooltip and upgData.tooltip or currentCmdDesc.tooltip
--    currentCmdDesc.hidden = (upgData.hidden == nil) and currentCmdDesc.hidden or upgData.hidden
--    currentCmdDesc.disabled = (upgData.disabled == nil) and currentCmdDesc.disabled or upgData.disabled
--
--    spEditUnitCmdDesc (unitID, cmdDescID, currentCmdDesc)
--    --Spring.Echo(tostringplus(currentCmdDesc))
--
--    -- getUpgradeTooltip(spGetUnitTeam(unitID))
--    -- Spring.Echo("New tooltip: "..newCmdDesc.tooltip.." disabled: "..tostring(disabled))
--end
