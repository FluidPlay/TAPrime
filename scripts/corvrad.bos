#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, dish, nano, beam;

static-var restore_delay, statechg_DesiredState, statechg_StateChanging, notBuilding;

// Signal definitions
#define SIG_AIM				2
#define SIG_ACTIVATE	2
#define SIG_BUILD		4	


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

activatescr()
{
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn nano to y-axis 0 speed <320.00000>;
	wait-for-turn nano around y-axis;
}

RestoreAfterDelay()
{
	if (notBuilding == 0) {
		sleep restore_delay / 2;
		start-script RestoreAfterDelay();
		return (0);
	}		
	sleep restore_delay;
	turn nano to y-axis <0.00000> speed <90.02198>;
	//turn sleeve to x-axis <0.00000> speed <50.01099>;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.00000>;
	turn base to x-axis anglex speed <105.00000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00000> speed <30.00000>;
	turn base to x-axis <0.00000> speed <30.00000>;
	return (0);
}

Create()
{
	restore_delay = 3000;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	
	dont-cache dish;
	dont-shade dish;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	spin dish around y-axis speed <100.02198>;
	start-script RequestState(0);
	//return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	turn dish to y-axis <0.00000> speed <100.00000>;
	wait-for-turn dish around y-axis;
	start-script RequestState(1);
	//return (0);
}

/// Ressurect actions

StartBuilding(heading)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	//turn nano to y-axis heading speed <320.00000>;
	//wait-for-turn nano around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	//turn nano to y-axis 0 speed <160.038462>;
	//wait-for-turn nano around y-axis;
	set-signal-mask 0;
	signal SIG_BUILD;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

//-------- Meteor Strike (beam)

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn nano to y-axis heading speed <80.00000>; //200 was too slow
	//turn sleeve to x-axis <0.00000> - pitch speed <200.00000>;
	wait-for-turn nano around y-axis;
	//wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	//show flash;
	//move barrel to z-axis [-6.00000] speed [1250.00000];
	//sleep 150;
	//hide flash;
	//wait-for-move barrel along z-axis;
	//move barrel to z-axis [0.00000] speed [7.50000];
	//return (0);
	start-script RestoreAfterDelay();
}

AimFromPrimary(piecenum)
{
	piecenum = nano;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = beam;
	return (0);
}

//------

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type SHATTER | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode dish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return (corpsetype);
}
